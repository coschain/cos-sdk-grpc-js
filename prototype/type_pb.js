/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.prototype.account_name', null, global);
goog.exportSymbol('proto.prototype.authority', null, global);
goog.exportSymbol('proto.prototype.beneficiary_route_type', null, global);
goog.exportSymbol('proto.prototype.chain_id', null, global);
goog.exportSymbol('proto.prototype.chain_properties', null, global);
goog.exportSymbol('proto.prototype.coin', null, global);
goog.exportSymbol('proto.prototype.dynamic_properties', null, global);
goog.exportSymbol('proto.prototype.internal_rewards_keeper', null, global);
goog.exportSymbol('proto.prototype.kv_account_auth', null, global);
goog.exportSymbol('proto.prototype.kv_key_auth', null, global);
goog.exportSymbol('proto.prototype.private_key_type', null, global);
goog.exportSymbol('proto.prototype.public_key_type', null, global);
goog.exportSymbol('proto.prototype.sha256', null, global);
goog.exportSymbol('proto.prototype.signature_type', null, global);
goog.exportSymbol('proto.prototype.time_point_sec', null, global);
goog.exportSymbol('proto.prototype.vest', null, global);
goog.exportSymbol('proto.prototype.witness_schedule_type', null, global);
goog.exportSymbol('proto.prototype.witness_schedule_type.witness_schedule_type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.account_name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.account_name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.account_name.displayName = 'proto.prototype.account_name';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.account_name.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.account_name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.account_name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.account_name.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.account_name}
 */
proto.prototype.account_name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.account_name;
  return proto.prototype.account_name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.account_name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.account_name}
 */
proto.prototype.account_name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.account_name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.account_name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.account_name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.account_name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.prototype.account_name.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.prototype.account_name.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.chain_id = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.chain_id, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.chain_id.displayName = 'proto.prototype.chain_id';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.chain_id.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.chain_id.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.chain_id} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_id.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.chain_id}
 */
proto.prototype.chain_id.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.chain_id;
  return proto.prototype.chain_id.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.chain_id} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.chain_id}
 */
proto.prototype.chain_id.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.chain_id.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.chain_id.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.chain_id} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_id.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.prototype.chain_id.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.chain_id.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.coin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.coin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.coin.displayName = 'proto.prototype.coin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.coin.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.coin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.coin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.coin.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.coin}
 */
proto.prototype.coin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.coin;
  return proto.prototype.coin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.coin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.coin}
 */
proto.prototype.coin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.coin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.coin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.coin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.coin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.prototype.coin.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.coin.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.vest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.vest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.vest.displayName = 'proto.prototype.vest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.vest.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.vest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.vest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.vest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.vest}
 */
proto.prototype.vest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.vest;
  return proto.prototype.vest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.vest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.vest}
 */
proto.prototype.vest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.vest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.vest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.vest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.vest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.prototype.vest.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.vest.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.public_key_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.public_key_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.public_key_type.displayName = 'proto.prototype.public_key_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.public_key_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.public_key_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.public_key_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.public_key_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.public_key_type}
 */
proto.prototype.public_key_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.public_key_type;
  return proto.prototype.public_key_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.public_key_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.public_key_type}
 */
proto.prototype.public_key_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.public_key_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.public_key_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.public_key_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.public_key_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.public_key_type.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.prototype.public_key_type.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.prototype.public_key_type.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.public_key_type.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.private_key_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.private_key_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.private_key_type.displayName = 'proto.prototype.private_key_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.private_key_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.private_key_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.private_key_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.private_key_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.private_key_type}
 */
proto.prototype.private_key_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.private_key_type;
  return proto.prototype.private_key_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.private_key_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.private_key_type}
 */
proto.prototype.private_key_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.private_key_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.private_key_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.private_key_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.private_key_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.private_key_type.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.prototype.private_key_type.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.prototype.private_key_type.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.private_key_type.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.kv_account_auth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.kv_account_auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.kv_account_auth.displayName = 'proto.prototype.kv_account_auth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.kv_account_auth.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.kv_account_auth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.kv_account_auth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.kv_account_auth.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.prototype.account_name.toObject(includeInstance, f),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.kv_account_auth}
 */
proto.prototype.kv_account_auth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.kv_account_auth;
  return proto.prototype.kv_account_auth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.kv_account_auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.kv_account_auth}
 */
proto.prototype.kv_account_auth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prototype.account_name;
      reader.readMessage(value,proto.prototype.account_name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.kv_account_auth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.kv_account_auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.kv_account_auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.kv_account_auth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prototype.account_name.serializeBinaryToWriter
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional account_name name = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.kv_account_auth.prototype.getName = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, proto.prototype.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.kv_account_auth.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.kv_account_auth.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.kv_account_auth.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 weight = 2;
 * @return {number}
 */
proto.prototype.kv_account_auth.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.kv_account_auth.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.kv_key_auth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.kv_key_auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.kv_key_auth.displayName = 'proto.prototype.kv_key_auth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.kv_key_auth.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.kv_key_auth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.kv_key_auth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.kv_key_auth.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.prototype.public_key_type.toObject(includeInstance, f),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.kv_key_auth}
 */
proto.prototype.kv_key_auth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.kv_key_auth;
  return proto.prototype.kv_key_auth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.kv_key_auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.kv_key_auth}
 */
proto.prototype.kv_key_auth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prototype.public_key_type;
      reader.readMessage(value,proto.prototype.public_key_type.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.kv_key_auth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.kv_key_auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.kv_key_auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.kv_key_auth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prototype.public_key_type.serializeBinaryToWriter
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional public_key_type key = 1;
 * @return {?proto.prototype.public_key_type}
 */
proto.prototype.kv_key_auth.prototype.getKey = function() {
  return /** @type{?proto.prototype.public_key_type} */ (
    jspb.Message.getWrapperField(this, proto.prototype.public_key_type, 1));
};


/** @param {?proto.prototype.public_key_type|undefined} value */
proto.prototype.kv_key_auth.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.kv_key_auth.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.kv_key_auth.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 weight = 2;
 * @return {number}
 */
proto.prototype.kv_key_auth.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.kv_key_auth.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.authority = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prototype.authority.repeatedFields_, null);
};
goog.inherits(proto.prototype.authority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.authority.displayName = 'proto.prototype.authority';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prototype.authority.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.authority.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.authority.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.authority} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.authority.toObject = function(includeInstance, msg) {
  var f, obj = {
    weightThreshold: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountAuthsList: jspb.Message.toObjectList(msg.getAccountAuthsList(),
    proto.prototype.kv_account_auth.toObject, includeInstance),
    keyAuthsList: jspb.Message.toObjectList(msg.getKeyAuthsList(),
    proto.prototype.kv_key_auth.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.authority}
 */
proto.prototype.authority.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.authority;
  return proto.prototype.authority.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.authority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.authority}
 */
proto.prototype.authority.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeightThreshold(value);
      break;
    case 3:
      var value = new proto.prototype.kv_account_auth;
      reader.readMessage(value,proto.prototype.kv_account_auth.deserializeBinaryFromReader);
      msg.addAccountAuths(value);
      break;
    case 4:
      var value = new proto.prototype.kv_key_auth;
      reader.readMessage(value,proto.prototype.kv_key_auth.deserializeBinaryFromReader);
      msg.addKeyAuths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.authority.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.authority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.authority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.authority.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeightThreshold();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAccountAuthsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.prototype.kv_account_auth.serializeBinaryToWriter
    );
  }
  f = message.getKeyAuthsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.prototype.kv_key_auth.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 weight_threshold = 2;
 * @return {number}
 */
proto.prototype.authority.prototype.getWeightThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.authority.prototype.setWeightThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated kv_account_auth account_auths = 3;
 * @return {!Array<!proto.prototype.kv_account_auth>}
 */
proto.prototype.authority.prototype.getAccountAuthsList = function() {
  return /** @type{!Array<!proto.prototype.kv_account_auth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prototype.kv_account_auth, 3));
};


/** @param {!Array<!proto.prototype.kv_account_auth>} value */
proto.prototype.authority.prototype.setAccountAuthsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.prototype.kv_account_auth=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prototype.kv_account_auth}
 */
proto.prototype.authority.prototype.addAccountAuths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.prototype.kv_account_auth, opt_index);
};


proto.prototype.authority.prototype.clearAccountAuthsList = function() {
  this.setAccountAuthsList([]);
};


/**
 * repeated kv_key_auth key_auths = 4;
 * @return {!Array<!proto.prototype.kv_key_auth>}
 */
proto.prototype.authority.prototype.getKeyAuthsList = function() {
  return /** @type{!Array<!proto.prototype.kv_key_auth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prototype.kv_key_auth, 4));
};


/** @param {!Array<!proto.prototype.kv_key_auth>} value */
proto.prototype.authority.prototype.setKeyAuthsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.prototype.kv_key_auth=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prototype.kv_key_auth}
 */
proto.prototype.authority.prototype.addKeyAuths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.prototype.kv_key_auth, opt_index);
};


proto.prototype.authority.prototype.clearKeyAuthsList = function() {
  this.setKeyAuthsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.time_point_sec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.time_point_sec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.time_point_sec.displayName = 'proto.prototype.time_point_sec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.time_point_sec.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.time_point_sec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.time_point_sec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.time_point_sec.toObject = function(includeInstance, msg) {
  var f, obj = {
    utcSeconds: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.time_point_sec}
 */
proto.prototype.time_point_sec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.time_point_sec;
  return proto.prototype.time_point_sec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.time_point_sec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.time_point_sec}
 */
proto.prototype.time_point_sec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUtcSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.time_point_sec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.time_point_sec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.time_point_sec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.time_point_sec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUtcSeconds();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 utc_seconds = 1;
 * @return {number}
 */
proto.prototype.time_point_sec.prototype.getUtcSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.time_point_sec.prototype.setUtcSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.signature_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.signature_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.signature_type.displayName = 'proto.prototype.signature_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.signature_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.signature_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.signature_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.signature_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.signature_type}
 */
proto.prototype.signature_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.signature_type;
  return proto.prototype.signature_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.signature_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.signature_type}
 */
proto.prototype.signature_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.signature_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.signature_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.signature_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.signature_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes sig = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.signature_type.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig = 1;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.prototype.signature_type.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.prototype.signature_type.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.signature_type.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.sha256 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.sha256, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.sha256.displayName = 'proto.prototype.sha256';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.sha256.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.sha256.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.sha256} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.sha256.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.sha256}
 */
proto.prototype.sha256.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.sha256;
  return proto.prototype.sha256.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.sha256} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.sha256}
 */
proto.prototype.sha256.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.sha256.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.sha256.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.sha256} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.sha256.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.sha256.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.prototype.sha256.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.prototype.sha256.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.sha256.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.chain_properties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.chain_properties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.chain_properties.displayName = 'proto.prototype.chain_properties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.chain_properties.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.chain_properties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.chain_properties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_properties.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountCreationFee: (f = msg.getAccountCreationFee()) && proto.prototype.coin.toObject(includeInstance, f),
    maximumBlockSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.chain_properties}
 */
proto.prototype.chain_properties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.chain_properties;
  return proto.prototype.chain_properties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.chain_properties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.chain_properties}
 */
proto.prototype.chain_properties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setAccountCreationFee(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumBlockSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.chain_properties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.chain_properties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.chain_properties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_properties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountCreationFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getMaximumBlockSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional coin account_creation_fee = 1;
 * @return {?proto.prototype.coin}
 */
proto.prototype.chain_properties.prototype.getAccountCreationFee = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 1));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.chain_properties.prototype.setAccountCreationFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.chain_properties.prototype.clearAccountCreationFee = function() {
  this.setAccountCreationFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.chain_properties.prototype.hasAccountCreationFee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 maximum_block_size = 2;
 * @return {number}
 */
proto.prototype.chain_properties.prototype.getMaximumBlockSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.chain_properties.prototype.setMaximumBlockSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.witness_schedule_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.witness_schedule_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.witness_schedule_type.displayName = 'proto.prototype.witness_schedule_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.witness_schedule_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.witness_schedule_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.witness_schedule_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.witness_schedule_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.witness_schedule_type}
 */
proto.prototype.witness_schedule_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.witness_schedule_type;
  return proto.prototype.witness_schedule_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.witness_schedule_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.witness_schedule_type}
 */
proto.prototype.witness_schedule_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prototype.witness_schedule_type.witness_schedule_type} */ (reader.readEnum());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.witness_schedule_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.witness_schedule_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.witness_schedule_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.witness_schedule_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.prototype.witness_schedule_type.witness_schedule_type = {
  TOP19: 0,
  TIMESHARE: 1,
  MINER: 2,
  NONE: 3
};

/**
 * optional witness_schedule_type value = 1;
 * @return {!proto.prototype.witness_schedule_type.witness_schedule_type}
 */
proto.prototype.witness_schedule_type.prototype.getValue = function() {
  return /** @type {!proto.prototype.witness_schedule_type.witness_schedule_type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.prototype.witness_schedule_type.witness_schedule_type} value */
proto.prototype.witness_schedule_type.prototype.setValue = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.dynamic_properties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.dynamic_properties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.dynamic_properties.displayName = 'proto.prototype.dynamic_properties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.dynamic_properties.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.dynamic_properties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.dynamic_properties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.dynamic_properties.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headBlockId: (f = msg.getHeadBlockId()) && proto.prototype.sha256.toObject(includeInstance, f),
    headBlockNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maximumBlockSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalCos: (f = msg.getTotalCos()) && proto.prototype.coin.toObject(includeInstance, f),
    time: (f = msg.getTime()) && proto.prototype.time_point_sec.toObject(includeInstance, f),
    currentWitness: (f = msg.getCurrentWitness()) && proto.prototype.account_name.toObject(includeInstance, f),
    irreversibleBlockNum: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tps: jspb.Message.getFieldWithDefault(msg, 9, 0),
    totalVestingShares: (f = msg.getTotalVestingShares()) && proto.prototype.vest.toObject(includeInstance, f),
    currentSupply: (f = msg.getCurrentSupply()) && proto.prototype.coin.toObject(includeInstance, f),
    currentAslot: jspb.Message.getFieldWithDefault(msg, 12, 0),
    weightedVps: jspb.Message.getFieldWithDefault(msg, 13, 0),
    postRewards: (f = msg.getPostRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    replyRewards: (f = msg.getReplyRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    totalTrxCnt: jspb.Message.getFieldWithDefault(msg, 16, 0),
    totalPostCnt: jspb.Message.getFieldWithDefault(msg, 17, 0),
    totalUserCnt: jspb.Message.getFieldWithDefault(msg, 18, 0),
    maxTps: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.dynamic_properties}
 */
proto.prototype.dynamic_properties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.dynamic_properties;
  return proto.prototype.dynamic_properties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.dynamic_properties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.dynamic_properties}
 */
proto.prototype.dynamic_properties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.prototype.sha256;
      reader.readMessage(value,proto.prototype.sha256.deserializeBinaryFromReader);
      msg.setHeadBlockId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeadBlockNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumBlockSize(value);
      break;
    case 5:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setTotalCos(value);
      break;
    case 6:
      var value = new proto.prototype.time_point_sec;
      reader.readMessage(value,proto.prototype.time_point_sec.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 7:
      var value = new proto.prototype.account_name;
      reader.readMessage(value,proto.prototype.account_name.deserializeBinaryFromReader);
      msg.setCurrentWitness(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIrreversibleBlockNum(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTps(value);
      break;
    case 10:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setTotalVestingShares(value);
      break;
    case 11:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setCurrentSupply(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentAslot(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWeightedVps(value);
      break;
    case 14:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setPostRewards(value);
      break;
    case 15:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setReplyRewards(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalTrxCnt(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalPostCnt(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalUserCnt(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxTps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.dynamic_properties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.dynamic_properties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.dynamic_properties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.dynamic_properties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeadBlockId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prototype.sha256.serializeBinaryToWriter
    );
  }
  f = message.getHeadBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMaximumBlockSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTotalCos();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.prototype.time_point_sec.serializeBinaryToWriter
    );
  }
  f = message.getCurrentWitness();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.prototype.account_name.serializeBinaryToWriter
    );
  }
  f = message.getIrreversibleBlockNum();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTps();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTotalVestingShares();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getCurrentSupply();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getCurrentAslot();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getWeightedVps();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getPostRewards();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getReplyRewards();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getTotalTrxCnt();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getTotalPostCnt();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getTotalUserCnt();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getMaxTps();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sha256 head_block_id = 2;
 * @return {?proto.prototype.sha256}
 */
proto.prototype.dynamic_properties.prototype.getHeadBlockId = function() {
  return /** @type{?proto.prototype.sha256} */ (
    jspb.Message.getWrapperField(this, proto.prototype.sha256, 2));
};


/** @param {?proto.prototype.sha256|undefined} value */
proto.prototype.dynamic_properties.prototype.setHeadBlockId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.dynamic_properties.prototype.clearHeadBlockId = function() {
  this.setHeadBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasHeadBlockId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 head_block_number = 3;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getHeadBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setHeadBlockNumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 maximum_block_size = 4;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getMaximumBlockSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setMaximumBlockSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional coin total_cos = 5;
 * @return {?proto.prototype.coin}
 */
proto.prototype.dynamic_properties.prototype.getTotalCos = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 5));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.dynamic_properties.prototype.setTotalCos = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.prototype.dynamic_properties.prototype.clearTotalCos = function() {
  this.setTotalCos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasTotalCos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional time_point_sec time = 6;
 * @return {?proto.prototype.time_point_sec}
 */
proto.prototype.dynamic_properties.prototype.getTime = function() {
  return /** @type{?proto.prototype.time_point_sec} */ (
    jspb.Message.getWrapperField(this, proto.prototype.time_point_sec, 6));
};


/** @param {?proto.prototype.time_point_sec|undefined} value */
proto.prototype.dynamic_properties.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.prototype.dynamic_properties.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional account_name current_witness = 7;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.dynamic_properties.prototype.getCurrentWitness = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, proto.prototype.account_name, 7));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.dynamic_properties.prototype.setCurrentWitness = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.prototype.dynamic_properties.prototype.clearCurrentWitness = function() {
  this.setCurrentWitness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasCurrentWitness = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 irreversible_block_num = 8;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getIrreversibleBlockNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setIrreversibleBlockNum = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 tps = 9;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTps = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional vest total_vesting_shares = 10;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getTotalVestingShares = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 10));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setTotalVestingShares = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.prototype.dynamic_properties.prototype.clearTotalVestingShares = function() {
  this.setTotalVestingShares(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasTotalVestingShares = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional coin current_supply = 11;
 * @return {?proto.prototype.coin}
 */
proto.prototype.dynamic_properties.prototype.getCurrentSupply = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 11));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.dynamic_properties.prototype.setCurrentSupply = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.prototype.dynamic_properties.prototype.clearCurrentSupply = function() {
  this.setCurrentSupply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasCurrentSupply = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 current_aslot = 12;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getCurrentAslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setCurrentAslot = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 weighted_vps = 13;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getWeightedVps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setWeightedVps = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional vest post_rewards = 14;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getPostRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 14));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setPostRewards = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.prototype.dynamic_properties.prototype.clearPostRewards = function() {
  this.setPostRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasPostRewards = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional vest reply_rewards = 15;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getReplyRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 15));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setReplyRewards = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.prototype.dynamic_properties.prototype.clearReplyRewards = function() {
  this.setReplyRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasReplyRewards = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint64 total_trx_cnt = 16;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTotalTrxCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTotalTrxCnt = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint64 total_post_cnt = 17;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTotalPostCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTotalPostCnt = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint64 total_user_cnt = 18;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTotalUserCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTotalUserCnt = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint32 max_tps = 19;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getMaxTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setMaxTps = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.internal_rewards_keeper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.internal_rewards_keeper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.internal_rewards_keeper.displayName = 'proto.prototype.internal_rewards_keeper';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.internal_rewards_keeper.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.internal_rewards_keeper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.internal_rewards_keeper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.internal_rewards_keeper.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rewardsMap: (f = msg.getRewardsMap()) ? f.toObject(includeInstance, proto.prototype.vest.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.internal_rewards_keeper}
 */
proto.prototype.internal_rewards_keeper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.internal_rewards_keeper;
  return proto.prototype.internal_rewards_keeper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.internal_rewards_keeper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.internal_rewards_keeper}
 */
proto.prototype.internal_rewards_keeper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = msg.getRewardsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.prototype.vest.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.internal_rewards_keeper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.internal_rewards_keeper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.internal_rewards_keeper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.internal_rewards_keeper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRewardsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.prototype.vest.serializeBinaryToWriter);
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.prototype.internal_rewards_keeper.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.internal_rewards_keeper.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, vest> rewards = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.prototype.vest>}
 */
proto.prototype.internal_rewards_keeper.prototype.getRewardsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.prototype.vest>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.prototype.vest));
};


proto.prototype.internal_rewards_keeper.prototype.clearRewardsMap = function() {
  this.getRewardsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.beneficiary_route_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.beneficiary_route_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.beneficiary_route_type.displayName = 'proto.prototype.beneficiary_route_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.beneficiary_route_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.beneficiary_route_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.beneficiary_route_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.beneficiary_route_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.prototype.account_name.toObject(includeInstance, f),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.beneficiary_route_type}
 */
proto.prototype.beneficiary_route_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.beneficiary_route_type;
  return proto.prototype.beneficiary_route_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.beneficiary_route_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.beneficiary_route_type}
 */
proto.prototype.beneficiary_route_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prototype.account_name;
      reader.readMessage(value,proto.prototype.account_name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.beneficiary_route_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.beneficiary_route_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.beneficiary_route_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.beneficiary_route_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prototype.account_name.serializeBinaryToWriter
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional account_name name = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.beneficiary_route_type.prototype.getName = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, proto.prototype.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.beneficiary_route_type.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.beneficiary_route_type.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.beneficiary_route_type.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 weight = 2;
 * @return {number}
 */
proto.prototype.beneficiary_route_type.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.beneficiary_route_type.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.prototype);
