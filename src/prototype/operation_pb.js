/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var prototype_type_pb = require('../prototype/type_pb.js');
goog.exportSymbol('proto.prototype.account_create_operation', null, global);
goog.exportSymbol('proto.prototype.bp_register_operation', null, global);
goog.exportSymbol('proto.prototype.bp_unregister_operation', null, global);
goog.exportSymbol('proto.prototype.bp_update_operation', null, global);
goog.exportSymbol('proto.prototype.bp_vote_operation', null, global);
goog.exportSymbol('proto.prototype.claim_all_operation', null, global);
goog.exportSymbol('proto.prototype.claim_operation', null, global);
goog.exportSymbol('proto.prototype.contract_apply_operation', null, global);
goog.exportSymbol('proto.prototype.contract_deploy_operation', null, global);
goog.exportSymbol('proto.prototype.convert_vesting_operation', null, global);
goog.exportSymbol('proto.prototype.follow_operation', null, global);
goog.exportSymbol('proto.prototype.internal_contract_apply_operation', null, global);
goog.exportSymbol('proto.prototype.post_operation', null, global);
goog.exportSymbol('proto.prototype.reply_operation', null, global);
goog.exportSymbol('proto.prototype.report_operation', null, global);
goog.exportSymbol('proto.prototype.report_operation.tag', null, global);
goog.exportSymbol('proto.prototype.stake_operation', null, global);
goog.exportSymbol('proto.prototype.transfer_operation', null, global);
goog.exportSymbol('proto.prototype.transfer_to_stake_vesting_operation', null, global);
goog.exportSymbol('proto.prototype.transfer_to_vesting_operation', null, global);
goog.exportSymbol('proto.prototype.un_stake_operation', null, global);
goog.exportSymbol('proto.prototype.vote_operation', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.account_create_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.account_create_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.account_create_operation.displayName = 'proto.prototype.account_create_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.account_create_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.account_create_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.account_create_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.account_create_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    fee: (f = msg.getFee()) && prototype_type_pb.coin.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    newAccountName: (f = msg.getNewAccountName()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && prototype_type_pb.public_key_type.toObject(includeInstance, f),
    jsonMetadata: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.account_create_operation}
 */
proto.prototype.account_create_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.account_create_operation;
  return proto.prototype.account_create_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.account_create_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.account_create_operation}
 */
proto.prototype.account_create_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.coin;
      reader.readMessage(value,prototype_type_pb.coin.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    case 3:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setNewAccountName(value);
      break;
    case 4:
      var value = new prototype_type_pb.public_key_type;
      reader.readMessage(value,prototype_type_pb.public_key_type.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.account_create_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.account_create_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.account_create_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.account_create_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.coin.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getNewAccountName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      prototype_type_pb.public_key_type.serializeBinaryToWriter
    );
  }
  f = message.getJsonMetadata();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional coin fee = 1;
 * @return {?proto.prototype.coin}
 */
proto.prototype.account_create_operation.prototype.getFee = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.coin, 1));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.account_create_operation.prototype.setFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.account_create_operation.prototype.clearFee = function() {
  this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.account_create_operation.prototype.hasFee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name creator = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.account_create_operation.prototype.getCreator = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.account_create_operation.prototype.setCreator = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.account_create_operation.prototype.clearCreator = function() {
  this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.account_create_operation.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional account_name new_account_name = 3;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.account_create_operation.prototype.getNewAccountName = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 3));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.account_create_operation.prototype.setNewAccountName = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.prototype.account_create_operation.prototype.clearNewAccountName = function() {
  this.setNewAccountName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.account_create_operation.prototype.hasNewAccountName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional public_key_type owner = 4;
 * @return {?proto.prototype.public_key_type}
 */
proto.prototype.account_create_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.public_key_type} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.public_key_type, 4));
};


/** @param {?proto.prototype.public_key_type|undefined} value */
proto.prototype.account_create_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.prototype.account_create_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.account_create_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string json_metadata = 8;
 * @return {string}
 */
proto.prototype.account_create_operation.prototype.getJsonMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.prototype.account_create_operation.prototype.setJsonMetadata = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.transfer_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.transfer_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.transfer_operation.displayName = 'proto.prototype.transfer_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.transfer_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.transfer_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.transfer_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.transfer_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    to: (f = msg.getTo()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && prototype_type_pb.coin.toObject(includeInstance, f),
    memo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.transfer_operation}
 */
proto.prototype.transfer_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.transfer_operation;
  return proto.prototype.transfer_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.transfer_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.transfer_operation}
 */
proto.prototype.transfer_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = new prototype_type_pb.coin;
      reader.readMessage(value,prototype_type_pb.coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.transfer_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.transfer_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.transfer_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.transfer_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      prototype_type_pb.coin.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional account_name from = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.transfer_operation.prototype.getFrom = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.transfer_operation.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.transfer_operation.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_operation.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name to = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.transfer_operation.prototype.getTo = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.transfer_operation.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.transfer_operation.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_operation.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional coin amount = 3;
 * @return {?proto.prototype.coin}
 */
proto.prototype.transfer_operation.prototype.getAmount = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.coin, 3));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.transfer_operation.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.prototype.transfer_operation.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_operation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.prototype.transfer_operation.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.prototype.transfer_operation.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.transfer_to_vesting_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.transfer_to_vesting_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.transfer_to_vesting_operation.displayName = 'proto.prototype.transfer_to_vesting_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.transfer_to_vesting_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.transfer_to_vesting_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.transfer_to_vesting_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.transfer_to_vesting_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    to: (f = msg.getTo()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && prototype_type_pb.coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.transfer_to_vesting_operation}
 */
proto.prototype.transfer_to_vesting_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.transfer_to_vesting_operation;
  return proto.prototype.transfer_to_vesting_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.transfer_to_vesting_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.transfer_to_vesting_operation}
 */
proto.prototype.transfer_to_vesting_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = new prototype_type_pb.coin;
      reader.readMessage(value,prototype_type_pb.coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.transfer_to_vesting_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.transfer_to_vesting_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.transfer_to_vesting_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.transfer_to_vesting_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      prototype_type_pb.coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name from = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.transfer_to_vesting_operation.prototype.getFrom = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.transfer_to_vesting_operation.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.transfer_to_vesting_operation.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_to_vesting_operation.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name to = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.transfer_to_vesting_operation.prototype.getTo = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.transfer_to_vesting_operation.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.transfer_to_vesting_operation.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_to_vesting_operation.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional coin amount = 3;
 * @return {?proto.prototype.coin}
 */
proto.prototype.transfer_to_vesting_operation.prototype.getAmount = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.coin, 3));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.transfer_to_vesting_operation.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.prototype.transfer_to_vesting_operation.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_to_vesting_operation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.vote_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.vote_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.vote_operation.displayName = 'proto.prototype.vote_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.vote_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.vote_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.vote_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.vote_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    voter: (f = msg.getVoter()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    idx: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.vote_operation}
 */
proto.prototype.vote_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.vote_operation;
  return proto.prototype.vote_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.vote_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.vote_operation}
 */
proto.prototype.vote_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setVoter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.vote_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.vote_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.vote_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.vote_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getIdx();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
};


/**
 * optional account_name voter = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.vote_operation.prototype.getVoter = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.vote_operation.prototype.setVoter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.vote_operation.prototype.clearVoter = function() {
  this.setVoter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.vote_operation.prototype.hasVoter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 idx = 3;
 * @return {string}
 */
proto.prototype.vote_operation.prototype.getIdx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.prototype.vote_operation.prototype.setIdx = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.bp_register_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.bp_register_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.bp_register_operation.displayName = 'proto.prototype.bp_register_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.bp_register_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.bp_register_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.bp_register_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_register_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    blockSigningKey: (f = msg.getBlockSigningKey()) && prototype_type_pb.public_key_type.toObject(includeInstance, f),
    props: (f = msg.getProps()) && prototype_type_pb.chain_properties.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.bp_register_operation}
 */
proto.prototype.bp_register_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.bp_register_operation;
  return proto.prototype.bp_register_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.bp_register_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.bp_register_operation}
 */
proto.prototype.bp_register_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = new prototype_type_pb.public_key_type;
      reader.readMessage(value,prototype_type_pb.public_key_type.deserializeBinaryFromReader);
      msg.setBlockSigningKey(value);
      break;
    case 5:
      var value = new prototype_type_pb.chain_properties;
      reader.readMessage(value,prototype_type_pb.chain_properties.deserializeBinaryFromReader);
      msg.setProps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.bp_register_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.bp_register_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.bp_register_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_register_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBlockSigningKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      prototype_type_pb.public_key_type.serializeBinaryToWriter
    );
  }
  f = message.getProps();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      prototype_type_pb.chain_properties.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name owner = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.bp_register_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.bp_register_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.bp_register_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.bp_register_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.prototype.bp_register_operation.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.prototype.bp_register_operation.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.prototype.bp_register_operation.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prototype.bp_register_operation.prototype.setDesc = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional public_key_type block_signing_key = 4;
 * @return {?proto.prototype.public_key_type}
 */
proto.prototype.bp_register_operation.prototype.getBlockSigningKey = function() {
  return /** @type{?proto.prototype.public_key_type} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.public_key_type, 4));
};


/** @param {?proto.prototype.public_key_type|undefined} value */
proto.prototype.bp_register_operation.prototype.setBlockSigningKey = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.prototype.bp_register_operation.prototype.clearBlockSigningKey = function() {
  this.setBlockSigningKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.bp_register_operation.prototype.hasBlockSigningKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional chain_properties props = 5;
 * @return {?proto.prototype.chain_properties}
 */
proto.prototype.bp_register_operation.prototype.getProps = function() {
  return /** @type{?proto.prototype.chain_properties} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.chain_properties, 5));
};


/** @param {?proto.prototype.chain_properties|undefined} value */
proto.prototype.bp_register_operation.prototype.setProps = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.prototype.bp_register_operation.prototype.clearProps = function() {
  this.setProps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.bp_register_operation.prototype.hasProps = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.bp_update_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.bp_update_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.bp_update_operation.displayName = 'proto.prototype.bp_update_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.bp_update_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.bp_update_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.bp_update_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_update_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    proposedStaminaFree: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tpsExpected: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.bp_update_operation}
 */
proto.prototype.bp_update_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.bp_update_operation;
  return proto.prototype.bp_update_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.bp_update_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.bp_update_operation}
 */
proto.prototype.bp_update_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setProposedStaminaFree(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTpsExpected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.bp_update_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.bp_update_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.bp_update_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_update_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getProposedStaminaFree();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTpsExpected();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional account_name owner = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.bp_update_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.bp_update_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.bp_update_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.bp_update_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 proposed_stamina_free = 2;
 * @return {number}
 */
proto.prototype.bp_update_operation.prototype.getProposedStaminaFree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.bp_update_operation.prototype.setProposedStaminaFree = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 tps_expected = 3;
 * @return {number}
 */
proto.prototype.bp_update_operation.prototype.getTpsExpected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.prototype.bp_update_operation.prototype.setTpsExpected = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.bp_unregister_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.bp_unregister_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.bp_unregister_operation.displayName = 'proto.prototype.bp_unregister_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.bp_unregister_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.bp_unregister_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.bp_unregister_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_unregister_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.bp_unregister_operation}
 */
proto.prototype.bp_unregister_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.bp_unregister_operation;
  return proto.prototype.bp_unregister_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.bp_unregister_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.bp_unregister_operation}
 */
proto.prototype.bp_unregister_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.bp_unregister_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.bp_unregister_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.bp_unregister_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_unregister_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name owner = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.bp_unregister_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.bp_unregister_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.bp_unregister_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.bp_unregister_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.bp_vote_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.bp_vote_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.bp_vote_operation.displayName = 'proto.prototype.bp_vote_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.bp_vote_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.bp_vote_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.bp_vote_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_vote_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    voter: (f = msg.getVoter()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    witness: (f = msg.getWitness()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    cancel: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.bp_vote_operation}
 */
proto.prototype.bp_vote_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.bp_vote_operation;
  return proto.prototype.bp_vote_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.bp_vote_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.bp_vote_operation}
 */
proto.prototype.bp_vote_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setVoter(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setWitness(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.bp_vote_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.bp_vote_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.bp_vote_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.bp_vote_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getWitness();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getCancel();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional account_name voter = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.bp_vote_operation.prototype.getVoter = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.bp_vote_operation.prototype.setVoter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.bp_vote_operation.prototype.clearVoter = function() {
  this.setVoter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.bp_vote_operation.prototype.hasVoter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name witness = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.bp_vote_operation.prototype.getWitness = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.bp_vote_operation.prototype.setWitness = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.bp_vote_operation.prototype.clearWitness = function() {
  this.setWitness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.bp_vote_operation.prototype.hasWitness = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool cancel = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prototype.bp_vote_operation.prototype.getCancel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.prototype.bp_vote_operation.prototype.setCancel = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.follow_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.follow_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.follow_operation.displayName = 'proto.prototype.follow_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.follow_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.follow_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.follow_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.follow_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    fAccount: (f = msg.getFAccount()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    cancel: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.follow_operation}
 */
proto.prototype.follow_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.follow_operation;
  return proto.prototype.follow_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.follow_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.follow_operation}
 */
proto.prototype.follow_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setFAccount(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.follow_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.follow_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.follow_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.follow_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getFAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getCancel();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional account_name account = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.follow_operation.prototype.getAccount = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.follow_operation.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.follow_operation.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.follow_operation.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name f_account = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.follow_operation.prototype.getFAccount = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.follow_operation.prototype.setFAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.follow_operation.prototype.clearFAccount = function() {
  this.setFAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.follow_operation.prototype.hasFAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool cancel = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prototype.follow_operation.prototype.getCancel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.prototype.follow_operation.prototype.setCancel = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.contract_deploy_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.contract_deploy_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.contract_deploy_operation.displayName = 'proto.prototype.contract_deploy_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.contract_deploy_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.contract_deploy_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.contract_deploy_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.contract_deploy_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    abi: msg.getAbi_asB64(),
    code: msg.getCode_asB64(),
    upgradeable: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.contract_deploy_operation}
 */
proto.prototype.contract_deploy_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.contract_deploy_operation;
  return proto.prototype.contract_deploy_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.contract_deploy_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.contract_deploy_operation}
 */
proto.prototype.contract_deploy_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAbi(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpgradeable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.contract_deploy_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.contract_deploy_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.contract_deploy_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.contract_deploy_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAbi_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUpgradeable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional account_name owner = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.contract_deploy_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.contract_deploy_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.contract_deploy_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.contract_deploy_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.prototype.contract_deploy_operation.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.prototype.contract_deploy_operation.prototype.setContract = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes abi = 3;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.contract_deploy_operation.prototype.getAbi = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes abi = 3;
 * This is a type-conversion wrapper around `getAbi()`
 * @return {string}
 */
proto.prototype.contract_deploy_operation.prototype.getAbi_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAbi()));
};


/**
 * optional bytes abi = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAbi()`
 * @return {!Uint8Array}
 */
proto.prototype.contract_deploy_operation.prototype.getAbi_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAbi()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.contract_deploy_operation.prototype.setAbi = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes code = 4;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.contract_deploy_operation.prototype.getCode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes code = 4;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.prototype.contract_deploy_operation.prototype.getCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCode()));
};


/**
 * optional bytes code = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.prototype.contract_deploy_operation.prototype.getCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCode()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.contract_deploy_operation.prototype.setCode = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool upgradeable = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prototype.contract_deploy_operation.prototype.getUpgradeable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.prototype.contract_deploy_operation.prototype.setUpgradeable = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.contract_apply_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.contract_apply_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.contract_apply_operation.displayName = 'proto.prototype.contract_apply_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.contract_apply_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.contract_apply_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.contract_apply_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.contract_apply_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    caller: (f = msg.getCaller()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    contract: jspb.Message.getFieldWithDefault(msg, 3, ""),
    method: jspb.Message.getFieldWithDefault(msg, 4, ""),
    params: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: (f = msg.getAmount()) && prototype_type_pb.coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.contract_apply_operation}
 */
proto.prototype.contract_apply_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.contract_apply_operation;
  return proto.prototype.contract_apply_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.contract_apply_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.contract_apply_operation}
 */
proto.prototype.contract_apply_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setCaller(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParams(value);
      break;
    case 6:
      var value = new prototype_type_pb.coin;
      reader.readMessage(value,prototype_type_pb.coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.contract_apply_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.contract_apply_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.contract_apply_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.contract_apply_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaller();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParams();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      prototype_type_pb.coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name caller = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.contract_apply_operation.prototype.getCaller = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.contract_apply_operation.prototype.setCaller = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.contract_apply_operation.prototype.clearCaller = function() {
  this.setCaller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.contract_apply_operation.prototype.hasCaller = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name owner = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.contract_apply_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.contract_apply_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.contract_apply_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.contract_apply_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string contract = 3;
 * @return {string}
 */
proto.prototype.contract_apply_operation.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prototype.contract_apply_operation.prototype.setContract = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string method = 4;
 * @return {string}
 */
proto.prototype.contract_apply_operation.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.prototype.contract_apply_operation.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string params = 5;
 * @return {string}
 */
proto.prototype.contract_apply_operation.prototype.getParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.prototype.contract_apply_operation.prototype.setParams = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional coin amount = 6;
 * @return {?proto.prototype.coin}
 */
proto.prototype.contract_apply_operation.prototype.getAmount = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.coin, 6));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.contract_apply_operation.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.prototype.contract_apply_operation.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.contract_apply_operation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.internal_contract_apply_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.internal_contract_apply_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.internal_contract_apply_operation.displayName = 'proto.prototype.internal_contract_apply_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.internal_contract_apply_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.internal_contract_apply_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.internal_contract_apply_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.internal_contract_apply_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromCaller: (f = msg.getFromCaller()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    fromOwner: (f = msg.getFromOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    fromContract: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fromMethod: jspb.Message.getFieldWithDefault(msg, 4, ""),
    toOwner: (f = msg.getToOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    toContract: jspb.Message.getFieldWithDefault(msg, 6, ""),
    toMethod: jspb.Message.getFieldWithDefault(msg, 7, ""),
    params: msg.getParams_asB64(),
    amount: (f = msg.getAmount()) && prototype_type_pb.coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.internal_contract_apply_operation}
 */
proto.prototype.internal_contract_apply_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.internal_contract_apply_operation;
  return proto.prototype.internal_contract_apply_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.internal_contract_apply_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.internal_contract_apply_operation}
 */
proto.prototype.internal_contract_apply_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setFromCaller(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setFromOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromContract(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromMethod(value);
      break;
    case 5:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setToOwner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setToContract(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setToMethod(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParams(value);
      break;
    case 9:
      var value = new prototype_type_pb.coin;
      reader.readMessage(value,prototype_type_pb.coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.internal_contract_apply_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.internal_contract_apply_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.internal_contract_apply_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.internal_contract_apply_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromCaller();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getFromOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getFromContract();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFromMethod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getToOwner();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getToContract();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getToMethod();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getParams_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      prototype_type_pb.coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name from_caller = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.internal_contract_apply_operation.prototype.getFromCaller = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.internal_contract_apply_operation.prototype.setFromCaller = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.internal_contract_apply_operation.prototype.clearFromCaller = function() {
  this.setFromCaller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.internal_contract_apply_operation.prototype.hasFromCaller = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name from_owner = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.internal_contract_apply_operation.prototype.getFromOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.internal_contract_apply_operation.prototype.setFromOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.internal_contract_apply_operation.prototype.clearFromOwner = function() {
  this.setFromOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.internal_contract_apply_operation.prototype.hasFromOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string from_contract = 3;
 * @return {string}
 */
proto.prototype.internal_contract_apply_operation.prototype.getFromContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prototype.internal_contract_apply_operation.prototype.setFromContract = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string from_method = 4;
 * @return {string}
 */
proto.prototype.internal_contract_apply_operation.prototype.getFromMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.prototype.internal_contract_apply_operation.prototype.setFromMethod = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional account_name to_owner = 5;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.internal_contract_apply_operation.prototype.getToOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 5));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.internal_contract_apply_operation.prototype.setToOwner = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.prototype.internal_contract_apply_operation.prototype.clearToOwner = function() {
  this.setToOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.internal_contract_apply_operation.prototype.hasToOwner = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string to_contract = 6;
 * @return {string}
 */
proto.prototype.internal_contract_apply_operation.prototype.getToContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.prototype.internal_contract_apply_operation.prototype.setToContract = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string to_method = 7;
 * @return {string}
 */
proto.prototype.internal_contract_apply_operation.prototype.getToMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.prototype.internal_contract_apply_operation.prototype.setToMethod = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes params = 8;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.internal_contract_apply_operation.prototype.getParams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes params = 8;
 * This is a type-conversion wrapper around `getParams()`
 * @return {string}
 */
proto.prototype.internal_contract_apply_operation.prototype.getParams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParams()));
};


/**
 * optional bytes params = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParams()`
 * @return {!Uint8Array}
 */
proto.prototype.internal_contract_apply_operation.prototype.getParams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParams()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.internal_contract_apply_operation.prototype.setParams = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional coin amount = 9;
 * @return {?proto.prototype.coin}
 */
proto.prototype.internal_contract_apply_operation.prototype.getAmount = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.coin, 9));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.internal_contract_apply_operation.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.prototype.internal_contract_apply_operation.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.internal_contract_apply_operation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.post_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prototype.post_operation.repeatedFields_, null);
};
goog.inherits(proto.prototype.post_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.post_operation.displayName = 'proto.prototype.post_operation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prototype.post_operation.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.post_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.post_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.post_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.post_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    owner: (f = msg.getOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    content: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 5),
    beneficiariesList: jspb.Message.toObjectList(msg.getBeneficiariesList(),
    prototype_type_pb.beneficiary_route_type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.post_operation}
 */
proto.prototype.post_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.post_operation;
  return proto.prototype.post_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.post_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.post_operation}
 */
proto.prototype.post_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setUuid(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 6:
      var value = new prototype_type_pb.beneficiary_route_type;
      reader.readMessage(value,prototype_type_pb.beneficiary_route_type.deserializeBinaryFromReader);
      msg.addBeneficiaries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.post_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.post_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.post_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.post_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getBeneficiariesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      prototype_type_pb.beneficiary_route_type.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 uuid = 1;
 * @return {string}
 */
proto.prototype.post_operation.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.prototype.post_operation.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional account_name owner = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.post_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.post_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.post_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.post_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.prototype.post_operation.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prototype.post_operation.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.prototype.post_operation.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.prototype.post_operation.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string tags = 5;
 * @return {!Array<string>}
 */
proto.prototype.post_operation.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.prototype.post_operation.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.prototype.post_operation.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.prototype.post_operation.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated beneficiary_route_type beneficiaries = 6;
 * @return {!Array<!proto.prototype.beneficiary_route_type>}
 */
proto.prototype.post_operation.prototype.getBeneficiariesList = function() {
  return /** @type{!Array<!proto.prototype.beneficiary_route_type>} */ (
    jspb.Message.getRepeatedWrapperField(this, prototype_type_pb.beneficiary_route_type, 6));
};


/** @param {!Array<!proto.prototype.beneficiary_route_type>} value */
proto.prototype.post_operation.prototype.setBeneficiariesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.prototype.beneficiary_route_type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prototype.beneficiary_route_type}
 */
proto.prototype.post_operation.prototype.addBeneficiaries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.prototype.beneficiary_route_type, opt_index);
};


proto.prototype.post_operation.prototype.clearBeneficiariesList = function() {
  this.setBeneficiariesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.reply_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prototype.reply_operation.repeatedFields_, null);
};
goog.inherits(proto.prototype.reply_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.reply_operation.displayName = 'proto.prototype.reply_operation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prototype.reply_operation.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.reply_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.reply_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.reply_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.reply_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    owner: (f = msg.getOwner()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentUuid: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    beneficiariesList: jspb.Message.toObjectList(msg.getBeneficiariesList(),
    prototype_type_pb.beneficiary_route_type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.reply_operation}
 */
proto.prototype.reply_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.reply_operation;
  return proto.prototype.reply_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.reply_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.reply_operation}
 */
proto.prototype.reply_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setUuid(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setParentUuid(value);
      break;
    case 6:
      var value = new prototype_type_pb.beneficiary_route_type;
      reader.readMessage(value,prototype_type_pb.beneficiary_route_type.deserializeBinaryFromReader);
      msg.addBeneficiaries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.reply_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.reply_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.reply_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.reply_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentUuid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = message.getBeneficiariesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      prototype_type_pb.beneficiary_route_type.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 uuid = 1;
 * @return {string}
 */
proto.prototype.reply_operation.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.prototype.reply_operation.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional account_name owner = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.reply_operation.prototype.getOwner = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.reply_operation.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.reply_operation.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.reply_operation.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.prototype.reply_operation.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prototype.reply_operation.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 parent_uuid = 4;
 * @return {string}
 */
proto.prototype.reply_operation.prototype.getParentUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.prototype.reply_operation.prototype.setParentUuid = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * repeated beneficiary_route_type beneficiaries = 6;
 * @return {!Array<!proto.prototype.beneficiary_route_type>}
 */
proto.prototype.reply_operation.prototype.getBeneficiariesList = function() {
  return /** @type{!Array<!proto.prototype.beneficiary_route_type>} */ (
    jspb.Message.getRepeatedWrapperField(this, prototype_type_pb.beneficiary_route_type, 6));
};


/** @param {!Array<!proto.prototype.beneficiary_route_type>} value */
proto.prototype.reply_operation.prototype.setBeneficiariesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.prototype.beneficiary_route_type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prototype.beneficiary_route_type}
 */
proto.prototype.reply_operation.prototype.addBeneficiaries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.prototype.beneficiary_route_type, opt_index);
};


proto.prototype.reply_operation.prototype.clearBeneficiariesList = function() {
  this.setBeneficiariesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.claim_all_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.claim_all_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.claim_all_operation.displayName = 'proto.prototype.claim_all_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.claim_all_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.claim_all_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.claim_all_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.claim_all_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && prototype_type_pb.account_name.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.claim_all_operation}
 */
proto.prototype.claim_all_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.claim_all_operation;
  return proto.prototype.claim_all_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.claim_all_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.claim_all_operation}
 */
proto.prototype.claim_all_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.claim_all_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.claim_all_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.claim_all_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.claim_all_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name account = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.claim_all_operation.prototype.getAccount = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.claim_all_operation.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.claim_all_operation.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.claim_all_operation.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.claim_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.claim_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.claim_operation.displayName = 'proto.prototype.claim_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.claim_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.claim_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.claim_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.claim_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.claim_operation}
 */
proto.prototype.claim_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.claim_operation;
  return proto.prototype.claim_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.claim_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.claim_operation}
 */
proto.prototype.claim_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.claim_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.claim_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.claim_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.claim_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional account_name account = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.claim_operation.prototype.getAccount = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.claim_operation.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.claim_operation.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.claim_operation.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.prototype.claim_operation.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.claim_operation.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.report_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prototype.report_operation.repeatedFields_, null);
};
goog.inherits(proto.prototype.report_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.report_operation.displayName = 'proto.prototype.report_operation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prototype.report_operation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.report_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.report_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.report_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.report_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    reporter: (f = msg.getReporter()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    reported: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reportTagList: jspb.Message.getRepeatedField(msg, 3),
    isArbitration: jspb.Message.getFieldWithDefault(msg, 4, false),
    isApproved: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.report_operation}
 */
proto.prototype.report_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.report_operation;
  return proto.prototype.report_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.report_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.report_operation}
 */
proto.prototype.report_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setReporter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReported(value);
      break;
    case 3:
      var value = /** @type {!Array<!proto.prototype.report_operation.tag>} */ (reader.readPackedEnum());
      msg.setReportTagList(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsArbitration(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsApproved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.report_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.report_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.report_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.report_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReporter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getReported();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getReportTagList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getIsArbitration();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsApproved();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.prototype.report_operation.tag = {
  CHILD_PORNOGRAPHY: 0,
  RACISM: 1,
  REACTIONARY: 2,
  PLAGIARISM: 3,
  SLANDER: 4,
  FALSE_PROPAGANDA: 5,
  PORNOGRAPHY: 6
};

/**
 * optional account_name reporter = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.report_operation.prototype.getReporter = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.report_operation.prototype.setReporter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.report_operation.prototype.clearReporter = function() {
  this.setReporter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.report_operation.prototype.hasReporter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 reported = 2;
 * @return {number}
 */
proto.prototype.report_operation.prototype.getReported = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.report_operation.prototype.setReported = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated tag report_tag = 3;
 * @return {!Array<!proto.prototype.report_operation.tag>}
 */
proto.prototype.report_operation.prototype.getReportTagList = function() {
  return /** @type {!Array<!proto.prototype.report_operation.tag>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<!proto.prototype.report_operation.tag>} value */
proto.prototype.report_operation.prototype.setReportTagList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.prototype.report_operation.tag} value
 * @param {number=} opt_index
 */
proto.prototype.report_operation.prototype.addReportTag = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.prototype.report_operation.prototype.clearReportTagList = function() {
  this.setReportTagList([]);
};


/**
 * optional bool is_arbitration = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prototype.report_operation.prototype.getIsArbitration = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.prototype.report_operation.prototype.setIsArbitration = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_approved = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prototype.report_operation.prototype.getIsApproved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.prototype.report_operation.prototype.setIsApproved = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.convert_vesting_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.convert_vesting_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.convert_vesting_operation.displayName = 'proto.prototype.convert_vesting_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.convert_vesting_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.convert_vesting_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.convert_vesting_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.convert_vesting_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && prototype_type_pb.vest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.convert_vesting_operation}
 */
proto.prototype.convert_vesting_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.convert_vesting_operation;
  return proto.prototype.convert_vesting_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.convert_vesting_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.convert_vesting_operation}
 */
proto.prototype.convert_vesting_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new prototype_type_pb.vest;
      reader.readMessage(value,prototype_type_pb.vest.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.convert_vesting_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.convert_vesting_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.convert_vesting_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.convert_vesting_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.vest.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name from = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.convert_vesting_operation.prototype.getFrom = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.convert_vesting_operation.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.convert_vesting_operation.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.convert_vesting_operation.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional vest amount = 2;
 * @return {?proto.prototype.vest}
 */
proto.prototype.convert_vesting_operation.prototype.getAmount = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.vest, 2));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.convert_vesting_operation.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.convert_vesting_operation.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.convert_vesting_operation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.stake_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.stake_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.stake_operation.displayName = 'proto.prototype.stake_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.stake_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.stake_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.stake_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.stake_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.stake_operation}
 */
proto.prototype.stake_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.stake_operation;
  return proto.prototype.stake_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.stake_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.stake_operation}
 */
proto.prototype.stake_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.stake_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.stake_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.stake_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.stake_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional account_name account = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.stake_operation.prototype.getAccount = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.stake_operation.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.stake_operation.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.stake_operation.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.prototype.stake_operation.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.stake_operation.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.un_stake_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.un_stake_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.un_stake_operation.displayName = 'proto.prototype.un_stake_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.un_stake_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.un_stake_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.un_stake_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.un_stake_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.un_stake_operation}
 */
proto.prototype.un_stake_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.un_stake_operation;
  return proto.prototype.un_stake_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.un_stake_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.un_stake_operation}
 */
proto.prototype.un_stake_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.un_stake_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.un_stake_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.un_stake_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.un_stake_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional account_name account = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.un_stake_operation.prototype.getAccount = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.un_stake_operation.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.un_stake_operation.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.un_stake_operation.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.prototype.un_stake_operation.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.un_stake_operation.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.transfer_to_stake_vesting_operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.transfer_to_stake_vesting_operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.transfer_to_stake_vesting_operation.displayName = 'proto.prototype.transfer_to_stake_vesting_operation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.transfer_to_stake_vesting_operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.transfer_to_stake_vesting_operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.transfer_to_stake_vesting_operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    to: (f = msg.getTo()) && prototype_type_pb.account_name.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && prototype_type_pb.coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.transfer_to_stake_vesting_operation}
 */
proto.prototype.transfer_to_stake_vesting_operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.transfer_to_stake_vesting_operation;
  return proto.prototype.transfer_to_stake_vesting_operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.transfer_to_stake_vesting_operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.transfer_to_stake_vesting_operation}
 */
proto.prototype.transfer_to_stake_vesting_operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new prototype_type_pb.account_name;
      reader.readMessage(value,prototype_type_pb.account_name.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = new prototype_type_pb.coin;
      reader.readMessage(value,prototype_type_pb.coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.transfer_to_stake_vesting_operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.transfer_to_stake_vesting_operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.transfer_to_stake_vesting_operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      prototype_type_pb.account_name.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      prototype_type_pb.coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional account_name from = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.getFrom = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.transfer_to_stake_vesting_operation.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.transfer_to_stake_vesting_operation.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional account_name to = 2;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.getTo = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.account_name, 2));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.transfer_to_stake_vesting_operation.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.transfer_to_stake_vesting_operation.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional coin amount = 3;
 * @return {?proto.prototype.coin}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.getAmount = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, prototype_type_pb.coin, 3));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.transfer_to_stake_vesting_operation.prototype.setAmount = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.prototype.transfer_to_stake_vesting_operation.prototype.clearAmount = function() {
  this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.transfer_to_stake_vesting_operation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.prototype);
