/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.prototype.account_name', null, global);
goog.exportSymbol('proto.prototype.beneficiary_route_type', null, global);
goog.exportSymbol('proto.prototype.chain_id', null, global);
goog.exportSymbol('proto.prototype.chain_properties', null, global);
goog.exportSymbol('proto.prototype.coin', null, global);
goog.exportSymbol('proto.prototype.dynamic_properties', null, global);
goog.exportSymbol('proto.prototype.gift_ticket_key_type', null, global);
goog.exportSymbol('proto.prototype.private_key_type', null, global);
goog.exportSymbol('proto.prototype.public_key_type', null, global);
goog.exportSymbol('proto.prototype.sha256', null, global);
goog.exportSymbol('proto.prototype.signature_type', null, global);
goog.exportSymbol('proto.prototype.time_point_sec', null, global);
goog.exportSymbol('proto.prototype.vest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.account_name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.account_name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.account_name.displayName = 'proto.prototype.account_name';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.account_name.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.account_name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.account_name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.account_name.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.account_name}
 */
proto.prototype.account_name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.account_name;
  return proto.prototype.account_name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.account_name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.account_name}
 */
proto.prototype.account_name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.account_name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.account_name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.account_name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.account_name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.prototype.account_name.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.prototype.account_name.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.chain_id = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.chain_id, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.chain_id.displayName = 'proto.prototype.chain_id';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.chain_id.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.chain_id.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.chain_id} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_id.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.chain_id}
 */
proto.prototype.chain_id.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.chain_id;
  return proto.prototype.chain_id.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.chain_id} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.chain_id}
 */
proto.prototype.chain_id.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.chain_id.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.chain_id.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.chain_id} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_id.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.prototype.chain_id.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.chain_id.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.coin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.coin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.coin.displayName = 'proto.prototype.coin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.coin.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.coin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.coin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.coin.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.coin}
 */
proto.prototype.coin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.coin;
  return proto.prototype.coin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.coin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.coin}
 */
proto.prototype.coin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.coin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.coin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.coin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.coin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {string}
 */
proto.prototype.coin.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.prototype.coin.prototype.setValue = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.vest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.vest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.vest.displayName = 'proto.prototype.vest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.vest.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.vest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.vest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.vest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.vest}
 */
proto.prototype.vest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.vest;
  return proto.prototype.vest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.vest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.vest}
 */
proto.prototype.vest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.vest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.vest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.vest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.vest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {string}
 */
proto.prototype.vest.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.prototype.vest.prototype.setValue = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.public_key_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.public_key_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.public_key_type.displayName = 'proto.prototype.public_key_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.public_key_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.public_key_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.public_key_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.public_key_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.public_key_type}
 */
proto.prototype.public_key_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.public_key_type;
  return proto.prototype.public_key_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.public_key_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.public_key_type}
 */
proto.prototype.public_key_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.public_key_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.public_key_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.public_key_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.public_key_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.public_key_type.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.prototype.public_key_type.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.prototype.public_key_type.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.public_key_type.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.private_key_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.private_key_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.private_key_type.displayName = 'proto.prototype.private_key_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.private_key_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.private_key_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.private_key_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.private_key_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.private_key_type}
 */
proto.prototype.private_key_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.private_key_type;
  return proto.prototype.private_key_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.private_key_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.private_key_type}
 */
proto.prototype.private_key_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.private_key_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.private_key_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.private_key_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.private_key_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.private_key_type.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.prototype.private_key_type.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.prototype.private_key_type.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.private_key_type.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.time_point_sec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.time_point_sec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.time_point_sec.displayName = 'proto.prototype.time_point_sec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.time_point_sec.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.time_point_sec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.time_point_sec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.time_point_sec.toObject = function(includeInstance, msg) {
  var f, obj = {
    utcSeconds: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.time_point_sec}
 */
proto.prototype.time_point_sec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.time_point_sec;
  return proto.prototype.time_point_sec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.time_point_sec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.time_point_sec}
 */
proto.prototype.time_point_sec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUtcSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.time_point_sec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.time_point_sec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.time_point_sec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.time_point_sec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUtcSeconds();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 utc_seconds = 1;
 * @return {number}
 */
proto.prototype.time_point_sec.prototype.getUtcSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.time_point_sec.prototype.setUtcSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.signature_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.signature_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.signature_type.displayName = 'proto.prototype.signature_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.signature_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.signature_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.signature_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.signature_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.signature_type}
 */
proto.prototype.signature_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.signature_type;
  return proto.prototype.signature_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.signature_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.signature_type}
 */
proto.prototype.signature_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.signature_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.signature_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.signature_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.signature_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes sig = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.signature_type.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig = 1;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.prototype.signature_type.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.prototype.signature_type.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.signature_type.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.sha256 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.sha256, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.sha256.displayName = 'proto.prototype.sha256';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.sha256.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.sha256.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.sha256} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.sha256.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.sha256}
 */
proto.prototype.sha256.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.sha256;
  return proto.prototype.sha256.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.sha256} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.sha256}
 */
proto.prototype.sha256.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.sha256.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.sha256.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.sha256} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.sha256.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.prototype.sha256.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.prototype.sha256.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.prototype.sha256.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.prototype.sha256.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.gift_ticket_key_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.gift_ticket_key_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.gift_ticket_key_type.displayName = 'proto.prototype.gift_ticket_key_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.gift_ticket_key_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.gift_ticket_key_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.gift_ticket_key_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.gift_ticket_key_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    from: jspb.Message.getFieldWithDefault(msg, 2, ""),
    to: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createBlock: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.gift_ticket_key_type}
 */
proto.prototype.gift_ticket_key_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.gift_ticket_key_type;
  return proto.prototype.gift_ticket_key_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.gift_ticket_key_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.gift_ticket_key_type}
 */
proto.prototype.gift_ticket_key_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreateBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.gift_ticket_key_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.gift_ticket_key_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.gift_ticket_key_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.gift_ticket_key_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreateBlock();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.prototype.gift_ticket_key_type.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.prototype.gift_ticket_key_type.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string from = 2;
 * @return {string}
 */
proto.prototype.gift_ticket_key_type.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.prototype.gift_ticket_key_type.prototype.setFrom = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to = 3;
 * @return {string}
 */
proto.prototype.gift_ticket_key_type.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.prototype.gift_ticket_key_type.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 create_block = 4;
 * @return {number}
 */
proto.prototype.gift_ticket_key_type.prototype.getCreateBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.prototype.gift_ticket_key_type.prototype.setCreateBlock = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.chain_properties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.chain_properties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.chain_properties.displayName = 'proto.prototype.chain_properties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.chain_properties.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.chain_properties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.chain_properties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_properties.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountCreationFee: (f = msg.getAccountCreationFee()) && proto.prototype.coin.toObject(includeInstance, f),
    maximumBlockSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    staminaFree: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tpsExpected: jspb.Message.getFieldWithDefault(msg, 4, 0),
    topNAcquireFreeToken: jspb.Message.getFieldWithDefault(msg, 5, 0),
    epochDuration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    perTicketPrice: (f = msg.getPerTicketPrice()) && proto.prototype.coin.toObject(includeInstance, f),
    perTicketWeight: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.chain_properties}
 */
proto.prototype.chain_properties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.chain_properties;
  return proto.prototype.chain_properties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.chain_properties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.chain_properties}
 */
proto.prototype.chain_properties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setAccountCreationFee(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumBlockSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStaminaFree(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTpsExpected(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTopNAcquireFreeToken(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochDuration(value);
      break;
    case 7:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setPerTicketPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPerTicketWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.chain_properties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.chain_properties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.chain_properties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.chain_properties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountCreationFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getMaximumBlockSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStaminaFree();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTpsExpected();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTopNAcquireFreeToken();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getEpochDuration();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPerTicketPrice();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getPerTicketWeight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional coin account_creation_fee = 1;
 * @return {?proto.prototype.coin}
 */
proto.prototype.chain_properties.prototype.getAccountCreationFee = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 1));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.chain_properties.prototype.setAccountCreationFee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.chain_properties.prototype.clearAccountCreationFee = function() {
  this.setAccountCreationFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.chain_properties.prototype.hasAccountCreationFee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 maximum_block_size = 2;
 * @return {number}
 */
proto.prototype.chain_properties.prototype.getMaximumBlockSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.chain_properties.prototype.setMaximumBlockSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 stamina_free = 3;
 * @return {number}
 */
proto.prototype.chain_properties.prototype.getStaminaFree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.prototype.chain_properties.prototype.setStaminaFree = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 tps_expected = 4;
 * @return {number}
 */
proto.prototype.chain_properties.prototype.getTpsExpected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.prototype.chain_properties.prototype.setTpsExpected = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 top_n_acquire_free_token = 5;
 * @return {number}
 */
proto.prototype.chain_properties.prototype.getTopNAcquireFreeToken = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.prototype.chain_properties.prototype.setTopNAcquireFreeToken = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 epoch_duration = 6;
 * @return {number}
 */
proto.prototype.chain_properties.prototype.getEpochDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.prototype.chain_properties.prototype.setEpochDuration = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional coin per_ticket_price = 7;
 * @return {?proto.prototype.coin}
 */
proto.prototype.chain_properties.prototype.getPerTicketPrice = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 7));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.chain_properties.prototype.setPerTicketPrice = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.prototype.chain_properties.prototype.clearPerTicketPrice = function() {
  this.setPerTicketPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.chain_properties.prototype.hasPerTicketPrice = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 per_ticket_weight = 8;
 * @return {number}
 */
proto.prototype.chain_properties.prototype.getPerTicketWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.prototype.chain_properties.prototype.setPerTicketWeight = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.dynamic_properties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.dynamic_properties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.dynamic_properties.displayName = 'proto.prototype.dynamic_properties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.dynamic_properties.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.dynamic_properties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.dynamic_properties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.dynamic_properties.toObject = function(includeInstance, msg) {
  var f, obj = {
    headBlockId: (f = msg.getHeadBlockId()) && proto.prototype.sha256.toObject(includeInstance, f),
    headBlockNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maximumBlockSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    totalCos: (f = msg.getTotalCos()) && proto.prototype.coin.toObject(includeInstance, f),
    time: (f = msg.getTime()) && proto.prototype.time_point_sec.toObject(includeInstance, f),
    currentWitness: (f = msg.getCurrentWitness()) && proto.prototype.account_name.toObject(includeInstance, f),
    tps: jspb.Message.getFieldWithDefault(msg, 9, 0),
    totalVest: (f = msg.getTotalVest()) && proto.prototype.vest.toObject(includeInstance, f),
    currentSupply: (f = msg.getCurrentSupply()) && proto.prototype.coin.toObject(includeInstance, f),
    postWeightedVps: jspb.Message.getFieldWithDefault(msg, 13, ""),
    postRewards: (f = msg.getPostRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    totalTrxCnt: jspb.Message.getFieldWithDefault(msg, 15, 0),
    totalPostCnt: jspb.Message.getFieldWithDefault(msg, 16, 0),
    totalUserCnt: jspb.Message.getFieldWithDefault(msg, 17, 0),
    maxTps: jspb.Message.getFieldWithDefault(msg, 18, 0),
    maxTpsBlockNum: jspb.Message.getFieldWithDefault(msg, 19, "0"),
    headBlockPrefix: jspb.Message.getFieldWithDefault(msg, 20, 0),
    reportRewards: (f = msg.getReportRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    ithYear: jspb.Message.getFieldWithDefault(msg, 22, 0),
    annualBudget: (f = msg.getAnnualBudget()) && proto.prototype.vest.toObject(includeInstance, f),
    annualMinted: (f = msg.getAnnualMinted()) && proto.prototype.vest.toObject(includeInstance, f),
    postDappRewards: (f = msg.getPostDappRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    voterRewards: (f = msg.getVoterRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    replyRewards: (f = msg.getReplyRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    replyWeightedVps: jspb.Message.getFieldWithDefault(msg, 28, ""),
    replyDappRewards: (f = msg.getReplyDappRewards()) && proto.prototype.vest.toObject(includeInstance, f),
    stakeVest: (f = msg.getStakeVest()) && proto.prototype.vest.toObject(includeInstance, f),
    witnessBootCompleted: jspb.Message.getFieldWithDefault(msg, 31, false),
    staminaFree: jspb.Message.getFieldWithDefault(msg, 32, 0),
    tpsExpected: jspb.Message.getFieldWithDefault(msg, 33, 0),
    avgTpsUpdateBlock: jspb.Message.getFieldWithDefault(msg, 34, 0),
    avgTpsInWindow: jspb.Message.getFieldWithDefault(msg, 35, 0),
    oneDayStamina: jspb.Message.getFieldWithDefault(msg, 36, 0),
    accountCreateFee: (f = msg.getAccountCreateFee()) && proto.prototype.coin.toObject(includeInstance, f),
    reputationAdmin: (f = msg.getReputationAdmin()) && proto.prototype.account_name.toObject(includeInstance, f),
    currentEpochStartBlock: jspb.Message.getFieldWithDefault(msg, 39, 0),
    epochDuration: jspb.Message.getFieldWithDefault(msg, 40, 0),
    topNAcquireFreeToken: jspb.Message.getFieldWithDefault(msg, 41, 0),
    perTicketPrice: (f = msg.getPerTicketPrice()) && proto.prototype.coin.toObject(includeInstance, f),
    perTicketWeight: jspb.Message.getFieldWithDefault(msg, 43, 0),
    ticketsIncome: (f = msg.getTicketsIncome()) && proto.prototype.vest.toObject(includeInstance, f),
    chargedTicketsNum: jspb.Message.getFieldWithDefault(msg, 45, 0),
    copyrightAdmin: (f = msg.getCopyrightAdmin()) && proto.prototype.account_name.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.dynamic_properties}
 */
proto.prototype.dynamic_properties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.dynamic_properties;
  return proto.prototype.dynamic_properties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.dynamic_properties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.dynamic_properties}
 */
proto.prototype.dynamic_properties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.prototype.sha256;
      reader.readMessage(value,proto.prototype.sha256.deserializeBinaryFromReader);
      msg.setHeadBlockId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeadBlockNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumBlockSize(value);
      break;
    case 5:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setTotalCos(value);
      break;
    case 6:
      var value = new proto.prototype.time_point_sec;
      reader.readMessage(value,proto.prototype.time_point_sec.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 7:
      var value = new proto.prototype.account_name;
      reader.readMessage(value,proto.prototype.account_name.deserializeBinaryFromReader);
      msg.setCurrentWitness(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTps(value);
      break;
    case 10:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setTotalVest(value);
      break;
    case 11:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setCurrentSupply(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostWeightedVps(value);
      break;
    case 14:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setPostRewards(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalTrxCnt(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalPostCnt(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalUserCnt(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxTps(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMaxTpsBlockNum(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeadBlockPrefix(value);
      break;
    case 21:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setReportRewards(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIthYear(value);
      break;
    case 23:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setAnnualBudget(value);
      break;
    case 24:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setAnnualMinted(value);
      break;
    case 25:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setPostDappRewards(value);
      break;
    case 26:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setVoterRewards(value);
      break;
    case 27:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setReplyRewards(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplyWeightedVps(value);
      break;
    case 29:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setReplyDappRewards(value);
      break;
    case 30:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setStakeVest(value);
      break;
    case 31:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWitnessBootCompleted(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStaminaFree(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTpsExpected(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvgTpsUpdateBlock(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvgTpsInWindow(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOneDayStamina(value);
      break;
    case 37:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setAccountCreateFee(value);
      break;
    case 38:
      var value = new proto.prototype.account_name;
      reader.readMessage(value,proto.prototype.account_name.deserializeBinaryFromReader);
      msg.setReputationAdmin(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentEpochStartBlock(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochDuration(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTopNAcquireFreeToken(value);
      break;
    case 42:
      var value = new proto.prototype.coin;
      reader.readMessage(value,proto.prototype.coin.deserializeBinaryFromReader);
      msg.setPerTicketPrice(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPerTicketWeight(value);
      break;
    case 44:
      var value = new proto.prototype.vest;
      reader.readMessage(value,proto.prototype.vest.deserializeBinaryFromReader);
      msg.setTicketsIncome(value);
      break;
    case 45:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChargedTicketsNum(value);
      break;
    case 46:
      var value = new proto.prototype.account_name;
      reader.readMessage(value,proto.prototype.account_name.deserializeBinaryFromReader);
      msg.setCopyrightAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.dynamic_properties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.dynamic_properties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.dynamic_properties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.dynamic_properties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadBlockId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prototype.sha256.serializeBinaryToWriter
    );
  }
  f = message.getHeadBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMaximumBlockSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTotalCos();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.prototype.time_point_sec.serializeBinaryToWriter
    );
  }
  f = message.getCurrentWitness();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.prototype.account_name.serializeBinaryToWriter
    );
  }
  f = message.getTps();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTotalVest();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getCurrentSupply();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getPostWeightedVps();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPostRewards();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getTotalTrxCnt();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getTotalPostCnt();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getTotalUserCnt();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getMaxTps();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getMaxTpsBlockNum();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      19,
      f
    );
  }
  f = message.getHeadBlockPrefix();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getReportRewards();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getIthYear();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getAnnualBudget();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getAnnualMinted();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getPostDappRewards();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getVoterRewards();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getReplyRewards();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getReplyWeightedVps();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getReplyDappRewards();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getStakeVest();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getWitnessBootCompleted();
  if (f) {
    writer.writeBool(
      31,
      f
    );
  }
  f = message.getStaminaFree();
  if (f !== 0) {
    writer.writeUint64(
      32,
      f
    );
  }
  f = message.getTpsExpected();
  if (f !== 0) {
    writer.writeUint64(
      33,
      f
    );
  }
  f = message.getAvgTpsUpdateBlock();
  if (f !== 0) {
    writer.writeUint64(
      34,
      f
    );
  }
  f = message.getAvgTpsInWindow();
  if (f !== 0) {
    writer.writeUint64(
      35,
      f
    );
  }
  f = message.getOneDayStamina();
  if (f !== 0) {
    writer.writeUint64(
      36,
      f
    );
  }
  f = message.getAccountCreateFee();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getReputationAdmin();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.prototype.account_name.serializeBinaryToWriter
    );
  }
  f = message.getCurrentEpochStartBlock();
  if (f !== 0) {
    writer.writeUint64(
      39,
      f
    );
  }
  f = message.getEpochDuration();
  if (f !== 0) {
    writer.writeUint64(
      40,
      f
    );
  }
  f = message.getTopNAcquireFreeToken();
  if (f !== 0) {
    writer.writeUint32(
      41,
      f
    );
  }
  f = message.getPerTicketPrice();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.prototype.coin.serializeBinaryToWriter
    );
  }
  f = message.getPerTicketWeight();
  if (f !== 0) {
    writer.writeUint64(
      43,
      f
    );
  }
  f = message.getTicketsIncome();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      proto.prototype.vest.serializeBinaryToWriter
    );
  }
  f = message.getChargedTicketsNum();
  if (f !== 0) {
    writer.writeUint64(
      45,
      f
    );
  }
  f = message.getCopyrightAdmin();
  if (f != null) {
    writer.writeMessage(
      46,
      f,
      proto.prototype.account_name.serializeBinaryToWriter
    );
  }
};


/**
 * optional sha256 head_block_id = 2;
 * @return {?proto.prototype.sha256}
 */
proto.prototype.dynamic_properties.prototype.getHeadBlockId = function() {
  return /** @type{?proto.prototype.sha256} */ (
    jspb.Message.getWrapperField(this, proto.prototype.sha256, 2));
};


/** @param {?proto.prototype.sha256|undefined} value */
proto.prototype.dynamic_properties.prototype.setHeadBlockId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.prototype.dynamic_properties.prototype.clearHeadBlockId = function() {
  this.setHeadBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasHeadBlockId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 head_block_number = 3;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getHeadBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setHeadBlockNumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 maximum_block_size = 4;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getMaximumBlockSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setMaximumBlockSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional coin total_cos = 5;
 * @return {?proto.prototype.coin}
 */
proto.prototype.dynamic_properties.prototype.getTotalCos = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 5));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.dynamic_properties.prototype.setTotalCos = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.prototype.dynamic_properties.prototype.clearTotalCos = function() {
  this.setTotalCos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasTotalCos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional time_point_sec time = 6;
 * @return {?proto.prototype.time_point_sec}
 */
proto.prototype.dynamic_properties.prototype.getTime = function() {
  return /** @type{?proto.prototype.time_point_sec} */ (
    jspb.Message.getWrapperField(this, proto.prototype.time_point_sec, 6));
};


/** @param {?proto.prototype.time_point_sec|undefined} value */
proto.prototype.dynamic_properties.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.prototype.dynamic_properties.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasTime = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional account_name current_witness = 7;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.dynamic_properties.prototype.getCurrentWitness = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, proto.prototype.account_name, 7));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.dynamic_properties.prototype.setCurrentWitness = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.prototype.dynamic_properties.prototype.clearCurrentWitness = function() {
  this.setCurrentWitness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasCurrentWitness = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 tps = 9;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTps = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional vest total_vest = 10;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getTotalVest = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 10));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setTotalVest = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.prototype.dynamic_properties.prototype.clearTotalVest = function() {
  this.setTotalVest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasTotalVest = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional coin current_supply = 11;
 * @return {?proto.prototype.coin}
 */
proto.prototype.dynamic_properties.prototype.getCurrentSupply = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 11));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.dynamic_properties.prototype.setCurrentSupply = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.prototype.dynamic_properties.prototype.clearCurrentSupply = function() {
  this.setCurrentSupply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasCurrentSupply = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string post_weighted_vps = 13;
 * @return {string}
 */
proto.prototype.dynamic_properties.prototype.getPostWeightedVps = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.prototype.dynamic_properties.prototype.setPostWeightedVps = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional vest post_rewards = 14;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getPostRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 14));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setPostRewards = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.prototype.dynamic_properties.prototype.clearPostRewards = function() {
  this.setPostRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasPostRewards = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint64 total_trx_cnt = 15;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTotalTrxCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTotalTrxCnt = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 total_post_cnt = 16;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTotalPostCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTotalPostCnt = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint64 total_user_cnt = 17;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTotalUserCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTotalUserCnt = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint32 max_tps = 18;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getMaxTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setMaxTps = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 max_tps_block_num = 19;
 * @return {string}
 */
proto.prototype.dynamic_properties.prototype.getMaxTpsBlockNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, "0"));
};


/** @param {string} value */
proto.prototype.dynamic_properties.prototype.setMaxTpsBlockNum = function(value) {
  jspb.Message.setProto3StringIntField(this, 19, value);
};


/**
 * optional uint32 head_block_prefix = 20;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getHeadBlockPrefix = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setHeadBlockPrefix = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional vest report_rewards = 21;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getReportRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 21));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setReportRewards = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.prototype.dynamic_properties.prototype.clearReportRewards = function() {
  this.setReportRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasReportRewards = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional uint32 ith_year = 22;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getIthYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setIthYear = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional vest annual_budget = 23;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getAnnualBudget = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 23));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setAnnualBudget = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.prototype.dynamic_properties.prototype.clearAnnualBudget = function() {
  this.setAnnualBudget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasAnnualBudget = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional vest annual_minted = 24;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getAnnualMinted = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 24));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setAnnualMinted = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.prototype.dynamic_properties.prototype.clearAnnualMinted = function() {
  this.setAnnualMinted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasAnnualMinted = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional vest post_dapp_rewards = 25;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getPostDappRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 25));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setPostDappRewards = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.prototype.dynamic_properties.prototype.clearPostDappRewards = function() {
  this.setPostDappRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasPostDappRewards = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional vest voter_rewards = 26;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getVoterRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 26));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setVoterRewards = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.prototype.dynamic_properties.prototype.clearVoterRewards = function() {
  this.setVoterRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasVoterRewards = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional vest reply_rewards = 27;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getReplyRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 27));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setReplyRewards = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.prototype.dynamic_properties.prototype.clearReplyRewards = function() {
  this.setReplyRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasReplyRewards = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional string reply_weighted_vps = 28;
 * @return {string}
 */
proto.prototype.dynamic_properties.prototype.getReplyWeightedVps = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.prototype.dynamic_properties.prototype.setReplyWeightedVps = function(value) {
  jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional vest reply_dapp_rewards = 29;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getReplyDappRewards = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 29));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setReplyDappRewards = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.prototype.dynamic_properties.prototype.clearReplyDappRewards = function() {
  this.setReplyDappRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasReplyDappRewards = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional vest stake_vest = 30;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getStakeVest = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 30));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setStakeVest = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.prototype.dynamic_properties.prototype.clearStakeVest = function() {
  this.setStakeVest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasStakeVest = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional bool witness_boot_completed = 31;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.prototype.dynamic_properties.prototype.getWitnessBootCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 31, false));
};


/** @param {boolean} value */
proto.prototype.dynamic_properties.prototype.setWitnessBootCompleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 31, value);
};


/**
 * optional uint64 stamina_free = 32;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getStaminaFree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setStaminaFree = function(value) {
  jspb.Message.setProto3IntField(this, 32, value);
};


/**
 * optional uint64 tps_expected = 33;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTpsExpected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTpsExpected = function(value) {
  jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional uint64 avg_tps_update_block = 34;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getAvgTpsUpdateBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setAvgTpsUpdateBlock = function(value) {
  jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * optional uint64 avg_tps_in_window = 35;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getAvgTpsInWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setAvgTpsInWindow = function(value) {
  jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional uint64 one_day_stamina = 36;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getOneDayStamina = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setOneDayStamina = function(value) {
  jspb.Message.setProto3IntField(this, 36, value);
};


/**
 * optional coin account_create_fee = 37;
 * @return {?proto.prototype.coin}
 */
proto.prototype.dynamic_properties.prototype.getAccountCreateFee = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 37));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.dynamic_properties.prototype.setAccountCreateFee = function(value) {
  jspb.Message.setWrapperField(this, 37, value);
};


proto.prototype.dynamic_properties.prototype.clearAccountCreateFee = function() {
  this.setAccountCreateFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasAccountCreateFee = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional account_name reputation_admin = 38;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.dynamic_properties.prototype.getReputationAdmin = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, proto.prototype.account_name, 38));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.dynamic_properties.prototype.setReputationAdmin = function(value) {
  jspb.Message.setWrapperField(this, 38, value);
};


proto.prototype.dynamic_properties.prototype.clearReputationAdmin = function() {
  this.setReputationAdmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasReputationAdmin = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional uint64 current_epoch_start_block = 39;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getCurrentEpochStartBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setCurrentEpochStartBlock = function(value) {
  jspb.Message.setProto3IntField(this, 39, value);
};


/**
 * optional uint64 epoch_duration = 40;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getEpochDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setEpochDuration = function(value) {
  jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * optional uint32 top_n_acquire_free_token = 41;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getTopNAcquireFreeToken = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setTopNAcquireFreeToken = function(value) {
  jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * optional coin per_ticket_price = 42;
 * @return {?proto.prototype.coin}
 */
proto.prototype.dynamic_properties.prototype.getPerTicketPrice = function() {
  return /** @type{?proto.prototype.coin} */ (
    jspb.Message.getWrapperField(this, proto.prototype.coin, 42));
};


/** @param {?proto.prototype.coin|undefined} value */
proto.prototype.dynamic_properties.prototype.setPerTicketPrice = function(value) {
  jspb.Message.setWrapperField(this, 42, value);
};


proto.prototype.dynamic_properties.prototype.clearPerTicketPrice = function() {
  this.setPerTicketPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasPerTicketPrice = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional uint64 per_ticket_weight = 43;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getPerTicketWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setPerTicketWeight = function(value) {
  jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional vest tickets_income = 44;
 * @return {?proto.prototype.vest}
 */
proto.prototype.dynamic_properties.prototype.getTicketsIncome = function() {
  return /** @type{?proto.prototype.vest} */ (
    jspb.Message.getWrapperField(this, proto.prototype.vest, 44));
};


/** @param {?proto.prototype.vest|undefined} value */
proto.prototype.dynamic_properties.prototype.setTicketsIncome = function(value) {
  jspb.Message.setWrapperField(this, 44, value);
};


proto.prototype.dynamic_properties.prototype.clearTicketsIncome = function() {
  this.setTicketsIncome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasTicketsIncome = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * optional uint64 charged_tickets_num = 45;
 * @return {number}
 */
proto.prototype.dynamic_properties.prototype.getChargedTicketsNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 45, 0));
};


/** @param {number} value */
proto.prototype.dynamic_properties.prototype.setChargedTicketsNum = function(value) {
  jspb.Message.setProto3IntField(this, 45, value);
};


/**
 * optional account_name copyright_admin = 46;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.dynamic_properties.prototype.getCopyrightAdmin = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, proto.prototype.account_name, 46));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.dynamic_properties.prototype.setCopyrightAdmin = function(value) {
  jspb.Message.setWrapperField(this, 46, value);
};


proto.prototype.dynamic_properties.prototype.clearCopyrightAdmin = function() {
  this.setCopyrightAdmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.dynamic_properties.prototype.hasCopyrightAdmin = function() {
  return jspb.Message.getField(this, 46) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prototype.beneficiary_route_type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prototype.beneficiary_route_type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.prototype.beneficiary_route_type.displayName = 'proto.prototype.beneficiary_route_type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prototype.beneficiary_route_type.prototype.toObject = function(opt_includeInstance) {
  return proto.prototype.beneficiary_route_type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prototype.beneficiary_route_type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.beneficiary_route_type.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.prototype.account_name.toObject(includeInstance, f),
    weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prototype.beneficiary_route_type}
 */
proto.prototype.beneficiary_route_type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prototype.beneficiary_route_type;
  return proto.prototype.beneficiary_route_type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prototype.beneficiary_route_type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prototype.beneficiary_route_type}
 */
proto.prototype.beneficiary_route_type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prototype.account_name;
      reader.readMessage(value,proto.prototype.account_name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prototype.beneficiary_route_type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prototype.beneficiary_route_type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prototype.beneficiary_route_type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prototype.beneficiary_route_type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prototype.account_name.serializeBinaryToWriter
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional account_name name = 1;
 * @return {?proto.prototype.account_name}
 */
proto.prototype.beneficiary_route_type.prototype.getName = function() {
  return /** @type{?proto.prototype.account_name} */ (
    jspb.Message.getWrapperField(this, proto.prototype.account_name, 1));
};


/** @param {?proto.prototype.account_name|undefined} value */
proto.prototype.beneficiary_route_type.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.prototype.beneficiary_route_type.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.prototype.beneficiary_route_type.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 weight = 2;
 * @return {number}
 */
proto.prototype.beneficiary_route_type.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.prototype.beneficiary_route_type.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.prototype);
